{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/home/truongduchuy910/apps/quantri.yensaodatquang.vn/app/pages/index.js\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Query, KeystoneProvider } from \"@keystonejs/apollo-helpers\";\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"http://localhost:3000\"\n  }),\n  cache: new InMemoryCache()\n});\n\nconst App = () => __jsx(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, __jsx(KeystoneProvider, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, __jsx(Query, {\n  query: gql`\n          query {\n            allPosts(first: 10) {\n              url\n            }\n          }\n        `,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, ({\n  data\n}) => __jsx(\"pre\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, _JSON$stringify(data)))));\n\nexport default App;","map":{"version":3,"sources":["/home/truongduchuy910/apps/quantri.yensaodatquang.vn/app/pages/index.js"],"names":["gql","React","ReactDOM","HttpLink","ApolloClient","InMemoryCache","ApolloProvider","Query","KeystoneProvider","client","link","uri","cache","App","data"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,EAAgBC,gBAAhB,QAAwC,4BAAxC;AAEA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,IAAI,EAAE,IAAIP,QAAJ,CAAa;AAAEQ,IAAAA,GAAG,EAAE;AAAP,GAAb,CADwB;AAE9BC,EAAAA,KAAK,EAAE,IAAIP,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,MAAMQ,GAAG,GAAG,MACV,MAAC,cAAD;AAAgB,EAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,KAAD;AACE,EAAA,KAAK,EAAET,GAAI;;;;;;SADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASG,CAAC;AAAEc,EAAAA;AAAF,CAAD,KAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAM,gBAAeA,IAAf,CAAN,CATjB,CADF,CADF,CADF;;AAkBA,eAAeD,GAAf","sourcesContent":["import gql from \"graphql-tag\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Query, KeystoneProvider } from \"@keystonejs/apollo-helpers\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"http://localhost:3000\" }),\n  cache: new InMemoryCache()\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <KeystoneProvider>\n      <Query\n        query={gql`\n          query {\n            allPosts(first: 10) {\n              url\n            }\n          }\n        `}\n      >\n        {({ data }) => <pre>{JSON.stringify(data)}</pre>}\n      </Query>\n    </KeystoneProvider>\n  </ApolloProvider>\n);\n\nexport default App;"]},"metadata":{},"sourceType":"module"}